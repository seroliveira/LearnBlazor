@page "/blazor-forms"

<div class="col-12 offset-md-2 col-md-8 border">
	<div class="text-center pt-4">
		<h2 class="text-success">Product Form</h2>
		<hr />
	</div>

	<div class="mx-2 px-2">
		<EditForm FormName="ProductCreate" Model="Product" OnValidSubmit="HandleProductCreate">
			<DataAnnotationsValidator />
			@* <ValidationSummary class="text-damage" /> *@
			<div class="form-group py-2">
				Product Name
				<InputText class="form-control" @bind-Value="@Product.Name" />
				<ValidationMessage For="@(() => Product.Name)" />
			</div>

			<div class="form-group py-2">
				Price
				<InputNumber class="form-control" @bind-Value="@Product.Price" />
				<ValidationMessage For="@(() => Product.Price)" />
			</div>

			<div class="form-group py-2">
				Category
				<InputSelect class="form-select" @bind-Value="@Product.Category">
					@foreach (var cat in Enum.GetValues(typeof(Category)))
					{
						<option value="@cat">@cat</option>
					}
				</InputSelect>
			</div>

			<div class="form-group py-2">
				IsActive
				<InputCheckbox class="form-check" @bind-Value="@Product.IsActive" />
			</div>

			<div class="form-group py-2">
				Available After
				<InputDate class="form-control" @bind-Value="@Product.AvailableAfter" />
			</div>

			<button type="submit" class="btn btn-primary" my-3 style="width:200px">
				Create Product
			</button>
			<p class="text-success">@(isProcessing == true ? "Processing..." : "")</p>
		</EditForm>

		@* <EditForm FormName="ProductCreateTemp" Model="ProductTemp" OnValidSubmit="HandleProductCreate"></EditForm> *@
	</div>
	@if (createdProduct != null)
	{
		<div class="mx-2 pt-4">
			<hr />
			<h2 class="text-success">Product Created!</h2>
			<div>
				Name: @createdProduct.Name <br />
				Price: @createdProduct.Price <br />
				Category: @createdProduct.Category <br />
				Is Active: @createdProduct.IsActive <br />
				Available After: @createdProduct.AvailableAfter <br />
			</div>
		</div>
	}
</div>


@code {
	[SupplyParameterFromForm(FormName = "ProductCreate")]
	public Product Product { get; set; } = new Product() { };

	// [SupplyParameterFromForm(FormName = "ProductCreateTemp")]
	// public Product ProductTemp { get; set; } = new Product() { };

	private Product? createdProduct { get; set; }

	private bool isProcessing = false;

	private async Task HandleProductCreate()
	{
		isProcessing = true;
		createdProduct = null; // Reset created product before processing
		await Task.Delay(3000); // Simulate a delay for processing

		createdProduct = Product;
		Product = new(); // Reset the form after submission


		isProcessing = false;
	}

	// private async Task HandleProductCreateTemp()
	// {
	// 	isProcessing = true;
	// 	createdProduct = null; // Reset created product before processing
	// 	await Task.Delay(3000); // Simulate a delay for processing

	// 	createdProduct = ProductTemp;
	// 	Product = new(); // Reset the form after submission


	// 	isProcessing = false;
	// }
}
